def merge(arr, temp, left, mid, right):
    inv_count = 0
    i = left
    j = mid + 1
    k = left
    
    while i <= mid and j <= right:
        if arr[i] <= arr[j]:
            temp[k] = arr[i]
            i += 1
        else:
            temp[k] = arr[j]
            j += 1
            inv_count += (mid - i + 1)
        k += 1
    
    while i <= mid:
        temp[k] = arr[i]
        i += 1
        k += 1
    
    while j <= right:
        temp[k] = arr[j]
        j += 1
        k += 1
    
    for i in range(left, right + 1):
        arr[i] = temp[i]
    
    return inv_count

def mergeSort(arr, temp, left, right):
    inv_count = 0
    if left < right:
        mid = (left + right) // 2
        inv_count += mergeSort(arr, temp, left, mid)
        inv_count += mergeSort(arr, temp, mid + 1, right)
        inv_count += merge(arr, temp, left, mid, right)
    return inv_count

def countInversions(arr):
    n = len(arr)
    temp = [0] * n
    return mergeSort(arr, temp, 0, n - 1)

# Example usage:
arr = [8, 4, 2, 1]
result = countInversions(arr)
print(result) # Output: 6 (inversions: [8, 4], [8, 2], [8, 1], [4, 2], [4, 1], [2, 1])

